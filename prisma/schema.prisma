datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  role          Role      @default(USER)
  sheets        Sheet[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}

model Sheet {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teams               Team[]

  name                String?
  avatar              String?
  age                 Int?
  current_mai         Int?
  aspect              String?
  become              String?  // Devenir
  strength            Int?     @default(25) // force
  agility             Int?     @default(25) // agilité
  vivacity            Int?     @default(25) // vivacité
  vigour              Int?     @default(25) // vigueur
  thinking            Int?     @default(25) // thinking
  perception          Int?     @default(25) // perception
  concentration       Int?     @default(25) // concentration
  understanding       Int?     @default(25) // entendement
  charisma            Int?     @default(25) // charisma
  empathy             Int?     @default(25) // empathie
  ego                 Int?     @default(25) // ego
  will                Int?     @default(25) // volonté
  current_health      Int?
  current_stability   Int?
  current_radiance    Int?
  feel_xp             Int?     @default(0)
  to_spend_feel_xp    Int?     @default(0)
  learn_xp            Int?     @default(0)
  to_spend_learn_xp   Int?     @default(0)
  live_xp             Int?     @default(0)
  to_spend_live_xp    Int?     @default(0)

  corpus              Corpus[]
  spyree              Spyree[]
  amee                Amee[]
  traits              Trait[]
  skills              Skill[]

  spells              Spell[]
  golems              Golem[]
  armors              Armor[]
  meleeWeapons        MeleeWeapon[]
  rangeWeapons        RangeWeapon[]
  items               Item[]

  notes               String? @default("")
}

model Whitelist {
  id                  String   @id @default(cuid())
  email               String?  @unique
}

model Team {
  id                  String   @id @default(cuid())
  name                String?  @unique
  members             Sheet[]
}

model Corpus {
  id                  String   @id @default(cuid())
  name                String?
  description         String?
  stat                String?
  bonus               Int?
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model Potential {
  id                  String   @id @default(cuid())
  category            String?
  name                String?
  description         String?
  spyrees             Spyree[]
}

model Spyree {
  id                  String    @id @default(cuid())
  level               Int?
  sheetId             String    @map("sheet_id")
  sheet               Sheet     @relation(fields: [sheetId], references: [id])
  potentialId         String    @map("potential_id")
  potential           Potential @relation(fields: [potentialId], references: [id])
}

model Amee {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model Trait {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  balance             Int?
  inborn              Boolean
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

enum SkillType {
  GENERAL
  SPYRAL
  MARTIAL
}

enum SkillDegree {
  BASE
  PRINCIPLE
  MASTERY
  TECHNIQUE
  SEQUENCE
}

model Skill {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  type                SkillType
  category            String
  degree              SkillDegree
  prerequisiteId      String?  @map("prerequisite_id")
  prerequisite        Skill?   @relation("SkillDependencies", fields: [prerequisiteId], references: [id])
  dependencies        Skill[]  @relation("SkillDependencies")

  sheets              Sheet[]
}

model Spell {
  id                  String   @id @default(cuid())
  name                String?
  incantation         String?
  targeting           String?
  duration            String?
  effect              String?
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model Golem {
  id                  String   @id @default(cuid())
  name                String?
  artefact            String?
  symbiosis           String?
  heart               String?
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model Property {
  id                  String   @id @default(cuid())
  name                String?
  description         String?

  armors              Armor[]
  meleeWeapons        MeleeWeapon[]
  rangeWeapons        RangeWeapon[]
}

enum ArmorType {
  LOW
  PARTIAL
  FULL
}

model Armor {
  id                  String   @id @default(cuid())
  name                String?
  protection          Int?
  current_protection  Int?
  index               Int?
  type                ArmorType
  bulk                Int?
  strength            Int?
  prerequisite_stat   String?
  prerequisite_value  Int?
  properties          Property[]
  quality             Int?
  equipped            Boolean  @default(false)
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model MeleeWeapon {
  id                  String   @id @default(cuid())
  name                String?
  damage              Int?
  extend              Int?
  bulk                Int?
  strength            Int?
  prerequisite_stat   String?
  prerequisite_value  Int?
  properties          Property[]
  quality             Int?
  equipped            Boolean  @default(false)
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model RangeWeapon {
  id                  String   @id @default(cuid())
  name                String?
  damage              Int?
  penetration_damage  Int?
  velocity            Int?
  rate                Int?
  reload_rate         Int?
  range               String?
  low_range           Int?
  medium_range        Int?
  long_range          Int?
  bulk                Int?
  strength            Int?
  prerequisite_stat   String?
  prerequisite_value  Int?
  properties          Property[]
  quality             Int?
  equipped            Boolean  @default(false)
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}

model Item {
  id                  String   @id @default(cuid())
  name                String?
  description         String?
  quantity            Int?
  
  sheetId             String   @map("sheet_id")
  sheet               Sheet    @relation(fields: [sheetId], references: [id])
}